package models1

import (
	"context"
	"fmt"
	"gorm.io/datatypes"
	"gorm.io/gorm"
	"time"
)

type _UserMgr struct {
	*_BaseMgr
}

// UserMgr open func
func UserMgr(db *gorm.DB) *_UserMgr {
	if db == nil {
		panic(fmt.Errorf("UserMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(context.Background())
	return &_UserMgr{_BaseMgr: &_BaseMgr{DB: db.Table("user"), isRelated: globalIsRelated, ctx: ctx, cancel: cancel, timeout: -1}}
}

// GetTableName get sql table name.获取数据库名字
func (obj *_UserMgr) GetTableName() string {
	return "user"
}

// Reset 重置gorm会话
func (obj *_UserMgr) Reset() *_UserMgr {
	obj.New()
	return obj
}

// Get 获取
func (obj *_UserMgr) Get() (result User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).First(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_UserMgr) Gets() (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Find(&results).Error

	return
}

////////////////////////////////// gorm replace /////////////////////////////////
func (obj *_UserMgr) Count(count *int64) (tx *gorm.DB) {
	return obj.DB.WithContext(obj.ctx).Model(User{}).Count(count)
}

//////////////////////////////////////////////////////////////////////////////////

//////////////////////////option case ////////////////////////////////////////////

// WithID id获取
func (obj *_UserMgr) WithID(id int64) Option {
	return optionFunc(func(o *options) { o.query["id"] = id })
}

// WithName name获取 姓名
func (obj *_UserMgr) WithName(name string) Option {
	return optionFunc(func(o *options) { o.query["name"] = name })
}

// WithUsername username获取 用户名
func (obj *_UserMgr) WithUsername(username string) Option {
	return optionFunc(func(o *options) { o.query["username"] = username })
}

// WithMobile mobile获取 手机号
func (obj *_UserMgr) WithMobile(mobile string) Option {
	return optionFunc(func(o *options) { o.query["mobile"] = mobile })
}

// WithStatus status获取 状态:0-异常;1-正常;2-删除;
func (obj *_UserMgr) WithStatus(status int8) Option {
	return optionFunc(func(o *options) { o.query["status"] = status })
}

// WithStoreID store_id获取 校区id
func (obj *_UserMgr) WithStoreID(storeID int) Option {
	return optionFunc(func(o *options) { o.query["store_id"] = storeID })
}

// WithGender gender获取 性别:1-男;2-女
func (obj *_UserMgr) WithGender(gender int8) Option {
	return optionFunc(func(o *options) { o.query["gender"] = gender })
}

// WithBirthday birthday获取 生日
func (obj *_UserMgr) WithBirthday(birthday datatypes.Date) Option {
	return optionFunc(func(o *options) { o.query["birthday"] = birthday })
}

// WithQq qq获取 QQ
func (obj *_UserMgr) WithQq(qq string) Option {
	return optionFunc(func(o *options) { o.query["qq"] = qq })
}

// WithWechat wechat获取 微信
func (obj *_UserMgr) WithWechat(wechat string) Option {
	return optionFunc(func(o *options) { o.query["wechat"] = wechat })
}

// WithEmail email获取 邮箱
func (obj *_UserMgr) WithEmail(email string) Option {
	return optionFunc(func(o *options) { o.query["email"] = email })
}

// WithProvince province获取 所在省
func (obj *_UserMgr) WithProvince(province string) Option {
	return optionFunc(func(o *options) { o.query["province"] = province })
}

// WithCity city获取 所在市
func (obj *_UserMgr) WithCity(city string) Option {
	return optionFunc(func(o *options) { o.query["city"] = city })
}

// WithDistrict district获取 所在区
func (obj *_UserMgr) WithDistrict(district string) Option {
	return optionFunc(func(o *options) { o.query["district"] = district })
}

// WithAddress address获取 居住地
func (obj *_UserMgr) WithAddress(address string) Option {
	return optionFunc(func(o *options) { o.query["address"] = address })
}

// WithLongitude longitude获取 经度
func (obj *_UserMgr) WithLongitude(longitude string) Option {
	return optionFunc(func(o *options) { o.query["longitude"] = longitude })
}

// WithLatitude latitude获取 维度
func (obj *_UserMgr) WithLatitude(latitude string) Option {
	return optionFunc(func(o *options) { o.query["latitude"] = latitude })
}

// WithPwd pwd获取 登录密码
func (obj *_UserMgr) WithPwd(pwd string) Option {
	return optionFunc(func(o *options) { o.query["pwd"] = pwd })
}

// WithPwdSalt pwd_salt获取 密码盐
func (obj *_UserMgr) WithPwdSalt(pwdSalt string) Option {
	return optionFunc(func(o *options) { o.query["pwd_salt"] = pwdSalt })
}

// WithCreatedAt created_at获取 创建时间
func (obj *_UserMgr) WithCreatedAt(createdAt time.Time) Option {
	return optionFunc(func(o *options) { o.query["created_at"] = createdAt })
}

// WithUpdatedAt updated_at获取 业务更新时间
func (obj *_UserMgr) WithUpdatedAt(updatedAt time.Time) Option {
	return optionFunc(func(o *options) { o.query["updated_at"] = updatedAt })
}

// WithDataUpdatedAt data_updated_at获取 更新时间
func (obj *_UserMgr) WithDataUpdatedAt(dataUpdatedAt time.Time) Option {
	return optionFunc(func(o *options) { o.query["data_updated_at"] = dataUpdatedAt })
}

// WithCreator creator获取 创建者
func (obj *_UserMgr) WithCreator(creator string) Option {
	return optionFunc(func(o *options) { o.query["creator"] = creator })
}

// WithUpdater updater获取 更新者
func (obj *_UserMgr) WithUpdater(updater string) Option {
	return optionFunc(func(o *options) { o.query["updater"] = updater })
}

// GetByOption 功能选项模式获取
func (obj *_UserMgr) GetByOption(opts ...Option) (result User, err error) {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}

	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where(options.query).First(&result).Error

	return
}

// GetByOptions 批量功能选项模式获取
func (obj *_UserMgr) GetByOptions(opts ...Option) (results []*User, err error) {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}

	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where(options.query).Find(&results).Error

	return
}

// SelectPage 分页查询
func (obj *_UserMgr) SelectPage(page IPage, opts ...Option) (resultPage IPage, err error) {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	resultPage = page
	results := make([]User, 0)
	var count int64 // 统计总的记录数
	query := obj.DB.WithContext(obj.ctx).Model(User{}).Where(options.query)
	query.Count(&count)
	resultPage.SetTotal(count)
	if len(page.GetOrederItemsString()) > 0 {
		query = query.Order(page.GetOrederItemsString())
	}
	err = query.Limit(int(page.GetSize())).Offset(int(page.Offset())).Find(&results).Error

	resultPage.SetRecords(results)
	return
}

//////////////////////////enume case ////////////////////////////////////////////

// GetFromID 通过id获取内容
func (obj *_UserMgr) GetFromID(id int64) (result User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`id` = ?", id).First(&result).Error

	return
}

// GetBatchFromID 批量查找
func (obj *_UserMgr) GetBatchFromID(ids []int64) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`id` IN (?)", ids).Find(&results).Error

	return
}

// GetFromName 通过name获取内容 姓名
func (obj *_UserMgr) GetFromName(name string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`name` = ?", name).Find(&results).Error

	return
}

// GetBatchFromName 批量查找 姓名
func (obj *_UserMgr) GetBatchFromName(names []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`name` IN (?)", names).Find(&results).Error

	return
}

// GetFromUsername 通过username获取内容 用户名
func (obj *_UserMgr) GetFromUsername(username string) (result User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`username` = ?", username).First(&result).Error

	return
}

// GetBatchFromUsername 批量查找 用户名
func (obj *_UserMgr) GetBatchFromUsername(usernames []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`username` IN (?)", usernames).Find(&results).Error

	return
}

// GetFromMobile 通过mobile获取内容 手机号
func (obj *_UserMgr) GetFromMobile(mobile string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`mobile` = ?", mobile).Find(&results).Error

	return
}

// GetBatchFromMobile 批量查找 手机号
func (obj *_UserMgr) GetBatchFromMobile(mobiles []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`mobile` IN (?)", mobiles).Find(&results).Error

	return
}

// GetFromStatus 通过status获取内容 状态:0-异常;1-正常;2-删除;
func (obj *_UserMgr) GetFromStatus(status int8) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`status` = ?", status).Find(&results).Error

	return
}

// GetBatchFromStatus 批量查找 状态:0-异常;1-正常;2-删除;
func (obj *_UserMgr) GetBatchFromStatus(statuss []int8) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`status` IN (?)", statuss).Find(&results).Error

	return
}

// GetFromStoreID 通过store_id获取内容 校区id
func (obj *_UserMgr) GetFromStoreID(storeID int) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`store_id` = ?", storeID).Find(&results).Error

	return
}

// GetBatchFromStoreID 批量查找 校区id
func (obj *_UserMgr) GetBatchFromStoreID(storeIDs []int) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`store_id` IN (?)", storeIDs).Find(&results).Error

	return
}

// GetFromGender 通过gender获取内容 性别:1-男;2-女
func (obj *_UserMgr) GetFromGender(gender int8) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`gender` = ?", gender).Find(&results).Error

	return
}

// GetBatchFromGender 批量查找 性别:1-男;2-女
func (obj *_UserMgr) GetBatchFromGender(genders []int8) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`gender` IN (?)", genders).Find(&results).Error

	return
}

// GetFromBirthday 通过birthday获取内容 生日
func (obj *_UserMgr) GetFromBirthday(birthday datatypes.Date) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`birthday` = ?", birthday).Find(&results).Error

	return
}

// GetBatchFromBirthday 批量查找 生日
func (obj *_UserMgr) GetBatchFromBirthday(birthdays []datatypes.Date) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`birthday` IN (?)", birthdays).Find(&results).Error

	return
}

// GetFromQq 通过qq获取内容 QQ
func (obj *_UserMgr) GetFromQq(qq string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`qq` = ?", qq).Find(&results).Error

	return
}

// GetBatchFromQq 批量查找 QQ
func (obj *_UserMgr) GetBatchFromQq(qqs []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`qq` IN (?)", qqs).Find(&results).Error

	return
}

// GetFromWechat 通过wechat获取内容 微信
func (obj *_UserMgr) GetFromWechat(wechat string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`wechat` = ?", wechat).Find(&results).Error

	return
}

// GetBatchFromWechat 批量查找 微信
func (obj *_UserMgr) GetBatchFromWechat(wechats []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`wechat` IN (?)", wechats).Find(&results).Error

	return
}

// GetFromEmail 通过email获取内容 邮箱
func (obj *_UserMgr) GetFromEmail(email string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`email` = ?", email).Find(&results).Error

	return
}

// GetBatchFromEmail 批量查找 邮箱
func (obj *_UserMgr) GetBatchFromEmail(emails []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`email` IN (?)", emails).Find(&results).Error

	return
}

// GetFromProvince 通过province获取内容 所在省
func (obj *_UserMgr) GetFromProvince(province string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`province` = ?", province).Find(&results).Error

	return
}

// GetBatchFromProvince 批量查找 所在省
func (obj *_UserMgr) GetBatchFromProvince(provinces []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`province` IN (?)", provinces).Find(&results).Error

	return
}

// GetFromCity 通过city获取内容 所在市
func (obj *_UserMgr) GetFromCity(city string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`city` = ?", city).Find(&results).Error

	return
}

// GetBatchFromCity 批量查找 所在市
func (obj *_UserMgr) GetBatchFromCity(citys []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`city` IN (?)", citys).Find(&results).Error

	return
}

// GetFromDistrict 通过district获取内容 所在区
func (obj *_UserMgr) GetFromDistrict(district string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`district` = ?", district).Find(&results).Error

	return
}

// GetBatchFromDistrict 批量查找 所在区
func (obj *_UserMgr) GetBatchFromDistrict(districts []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`district` IN (?)", districts).Find(&results).Error

	return
}

// GetFromAddress 通过address获取内容 居住地
func (obj *_UserMgr) GetFromAddress(address string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`address` = ?", address).Find(&results).Error

	return
}

// GetBatchFromAddress 批量查找 居住地
func (obj *_UserMgr) GetBatchFromAddress(addresss []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`address` IN (?)", addresss).Find(&results).Error

	return
}

// GetFromLongitude 通过longitude获取内容 经度
func (obj *_UserMgr) GetFromLongitude(longitude string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`longitude` = ?", longitude).Find(&results).Error

	return
}

// GetBatchFromLongitude 批量查找 经度
func (obj *_UserMgr) GetBatchFromLongitude(longitudes []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`longitude` IN (?)", longitudes).Find(&results).Error

	return
}

// GetFromLatitude 通过latitude获取内容 维度
func (obj *_UserMgr) GetFromLatitude(latitude string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`latitude` = ?", latitude).Find(&results).Error

	return
}

// GetBatchFromLatitude 批量查找 维度
func (obj *_UserMgr) GetBatchFromLatitude(latitudes []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`latitude` IN (?)", latitudes).Find(&results).Error

	return
}

// GetFromPwd 通过pwd获取内容 登录密码
func (obj *_UserMgr) GetFromPwd(pwd string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`pwd` = ?", pwd).Find(&results).Error

	return
}

// GetBatchFromPwd 批量查找 登录密码
func (obj *_UserMgr) GetBatchFromPwd(pwds []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`pwd` IN (?)", pwds).Find(&results).Error

	return
}

// GetFromPwdSalt 通过pwd_salt获取内容 密码盐
func (obj *_UserMgr) GetFromPwdSalt(pwdSalt string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`pwd_salt` = ?", pwdSalt).Find(&results).Error

	return
}

// GetBatchFromPwdSalt 批量查找 密码盐
func (obj *_UserMgr) GetBatchFromPwdSalt(pwdSalts []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`pwd_salt` IN (?)", pwdSalts).Find(&results).Error

	return
}

// GetFromCreatedAt 通过created_at获取内容 创建时间
func (obj *_UserMgr) GetFromCreatedAt(createdAt time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`created_at` = ?", createdAt).Find(&results).Error

	return
}

// GetBatchFromCreatedAt 批量查找 创建时间
func (obj *_UserMgr) GetBatchFromCreatedAt(createdAts []time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`created_at` IN (?)", createdAts).Find(&results).Error

	return
}

// GetFromUpdatedAt 通过updated_at获取内容 业务更新时间
func (obj *_UserMgr) GetFromUpdatedAt(updatedAt time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`updated_at` = ?", updatedAt).Find(&results).Error

	return
}

// GetBatchFromUpdatedAt 批量查找 业务更新时间
func (obj *_UserMgr) GetBatchFromUpdatedAt(updatedAts []time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`updated_at` IN (?)", updatedAts).Find(&results).Error

	return
}

// GetFromDataUpdatedAt 通过data_updated_at获取内容 更新时间
func (obj *_UserMgr) GetFromDataUpdatedAt(dataUpdatedAt time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`data_updated_at` = ?", dataUpdatedAt).Find(&results).Error

	return
}

// GetBatchFromDataUpdatedAt 批量查找 更新时间
func (obj *_UserMgr) GetBatchFromDataUpdatedAt(dataUpdatedAts []time.Time) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`data_updated_at` IN (?)", dataUpdatedAts).Find(&results).Error

	return
}

// GetFromCreator 通过creator获取内容 创建者
func (obj *_UserMgr) GetFromCreator(creator string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`creator` = ?", creator).Find(&results).Error

	return
}

// GetBatchFromCreator 批量查找 创建者
func (obj *_UserMgr) GetBatchFromCreator(creators []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`creator` IN (?)", creators).Find(&results).Error

	return
}

// GetFromUpdater 通过updater获取内容 更新者
func (obj *_UserMgr) GetFromUpdater(updater string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`updater` = ?", updater).Find(&results).Error

	return
}

// GetBatchFromUpdater 批量查找 更新者
func (obj *_UserMgr) GetBatchFromUpdater(updaters []string) (results []*User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`updater` IN (?)", updaters).Find(&results).Error

	return
}

//////////////////////////primary index case ////////////////////////////////////////////

// FetchByPrimaryKey primary or index 获取唯一内容
func (obj *_UserMgr) FetchByPrimaryKey(id int64) (result User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`id` = ?", id).First(&result).Error

	return
}

// FetchUniqueByUsername primary or index 获取唯一内容
func (obj *_UserMgr) FetchUniqueByUsername(username string) (result User, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(User{}).Where("`username` = ?", username).First(&result).Error

	return
}
