// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, newData *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id            int64     `db:"id"`
		Name          string    `db:"name"`            // 姓名
		Username      string    `db:"username"`        // 用户名
		Mobile        string    `db:"mobile"`          // 手机号
		Status        int64     `db:"status"`          // 状态:0-异常;1-正常;2-删除;
		Gender        int64     `db:"gender"`          // 性别:1-男;2-女
		Birthday      time.Time `db:"birthday"`        // 生日
		Qq            string    `db:"qq"`              // QQ
		Wechat        string    `db:"wechat"`          // 微信
		Email         string    `db:"email"`           // 邮箱
		Province      string    `db:"province"`        // 所在省
		City          string    `db:"city"`            // 所在市
		District      string    `db:"district"`        // 所在区
		Address       string    `db:"address"`         // 居住地
		Longitude     string    `db:"longitude"`       // 经度
		Latitude      string    `db:"latitude"`        // 维度
		Pwd           string    `db:"pwd"`             // 登录密码
		PwdSalt       string    `db:"pwd_salt"`        // 密码盐
		CreatedAt     time.Time `db:"created_at"`      // 创建时间
		UpdatedAt     time.Time `db:"updated_at"`      // 业务更新时间
		DataUpdatedAt time.Time `db:"data_updated_at"` // 更新时间
		Creator       string    `db:"creator"`         // 创建者
		Updater       string    `db:"updater"`         // 更新者
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Username, data.Mobile, data.Status, data.Gender, data.Birthday, data.Qq, data.Wechat, data.Email, data.Province, data.City, data.District, data.Address, data.Longitude, data.Latitude, data.Pwd, data.PwdSalt, data.CreatedAt, data.UpdatedAt, data.DataUpdatedAt, data.Creator, data.Updater)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Username, newData.Mobile, newData.Status, newData.Gender, newData.Birthday, newData.Qq, newData.Wechat, newData.Email, newData.Province, newData.City, newData.District, newData.Address, newData.Longitude, newData.Latitude, newData.Pwd, newData.PwdSalt, newData.CreatedAt, newData.UpdatedAt, newData.DataUpdatedAt, newData.Creator, newData.Updater, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
