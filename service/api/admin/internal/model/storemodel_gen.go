// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	storeFieldNames          = builder.RawFieldNames(&Store{})
	storeRows                = strings.Join(storeFieldNames, ",")
	storeRowsExpectAutoSet   = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	storeRowsWithPlaceHolder = strings.Join(stringx.Remove(storeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	storeModel interface {
		Insert(ctx context.Context, data *Store) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Store, error)
		Update(ctx context.Context, newData *Store) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStoreModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Store struct {
		Id            int64     `db:"id"`
		Name          string    `db:"name"`            // 校区名称
		CreatedAt     time.Time `db:"created_at"`      // 创建时间
		UpdatedAt     time.Time `db:"updated_at"`      // 业务更新时间
		DataUpdatedAt time.Time `db:"data_updated_at"` // 更新时间
		Creator       string    `db:"creator"`         // 创建者
		Updater       string    `db:"updater"`         // 更新者
	}
)

func newStoreModel(conn sqlx.SqlConn) *defaultStoreModel {
	return &defaultStoreModel{
		conn:  conn,
		table: "`store`",
	}
}

func (m *defaultStoreModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStoreModel) FindOne(ctx context.Context, id int64) (*Store, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", storeRows, m.table)
	var resp Store
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStoreModel) Insert(ctx context.Context, data *Store) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, storeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.CreatedAt, data.UpdatedAt, data.DataUpdatedAt, data.Creator, data.Updater)
	return ret, err
}

func (m *defaultStoreModel) Update(ctx context.Context, data *Store) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, storeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.CreatedAt, data.UpdatedAt, data.DataUpdatedAt, data.Creator, data.Updater, data.Id)
	return err
}

func (m *defaultStoreModel) tableName() string {
	return m.table
}
